{
  // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  //  "prefix": "log",
  //  "body": [
  //   "console.log('$1');",
  //   "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "Page with PageStatus": {
    "prefix": [
      "pspage"
    ],
    "body": [
      "      import 'package:flutter/material.dart';",
      "      import 'package:dreamic/presentation/elements/page_status_wrapper.dart';",
      "      ",
      "      class ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g} extends StatelessWidget {",
      "        const ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}({super.key});",
      "      ",
      "        @override",
      "        Widget build(BuildContext context) {",
      "          return PageStatusWrapper<${TM_FILENAME_BASE/_page|(?:^|_)(\\w)/${1:/capitalize}/g}Cubit, ${TM_FILENAME_BASE/_page|(?:^|_)(\\w)/${1:/capitalize}/g}CubitState>(",
      "            cubitFactory: () => ${TM_FILENAME_BASE/_page|(?:^|_)(\\w)/${1:/capitalize}/g}Cubit()..getInitialData(),",
      "            child: Scaffold(",
      "              appBar: AppBar(",
      "                //automaticallyImplyLeading: false,",
      "                title: const Text(''),",
      "              ),",
      "              body: PageStatusBodyWrapper<${TM_FILENAME_BASE/_page|(?:^|_)(\\w)/${1:/capitalize}/g}Cubit, ${TM_FILENAME_BASE/_page|(?:^|_)(\\w)/${1:/capitalize}/g}CubitState>(",
      "                loadedChildBuilder: (context, state) {",
      "                  return Container();",
      "                },",
      "              ),",
      "            ),",
      "          );",
      "        }",
      "      }",
    ]
  },
  "Cubit with PageStatus": {
    "prefix": [
      "pscubit"
    ],
    "body": [
      "      import 'package:dreamic/presentation/helpers/cubit_base.dart';",
      "      import 'package:dreamic/presentation/helpers/page_statuses.dart';",
      "      ",
      "      part '${TM_FILENAME_BASE/_cubit/_state/}.dart';",
      "      ",
      "      class ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}Cubit extends CubitBase<${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState> {",
      "        ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}Cubit() : super(const ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState());",
      "",
      "        getInitialData() async {}",
      "      }",
    ]
  },
  "State with PageStatus": {
    "prefix": [
      "psstate"
    ],
    "body": [
      "      part of '${TM_FILENAME_BASE/_state/_cubit/}.dart';",
      "",
      "      class ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState extends CubitBaseState {",
      "        const ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState({",
      "          super.pageStatus = PageStatus.loading,",
      "        });",
      "      ",
      "        @override",
      "        ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState copyWith({",
      "          PageStatus? pageStatus,",
      "        }) {",
      "          return ${TM_FILENAME_BASE/(_state|_cubit)|(?:^|_)(\\w)/${2:/capitalize}/g}CubitState(",
      "            pageStatus: pageStatus ?? this.pageStatus,",
      "          );",
      "        }",
      "      ",
      "        @override",
      "        List<Object> get props => [",
      "              pageStatus,",
      "            ];",
      "      }",
      "      ",
    ]
  },
  "Remark header": {
    "prefix": [
      "rrr"
    ],
    "body": [
      "//",
      "// ${1}",
      "//",
      "$0"
    ]
  },
  // "Get View": {
  // 	"prefix": [
  // 		"gview"
  // 	],
  // 	"body": [
  // 		"import 'package:flutter/material.dart';",
  // 		"import 'package:get/get.dart';",
  // 		"",
  // 		"class ${1:$TM_FILENAME_BASE}View extends StatelessWidget {",
  // 		"\tfinal bool isForNew;",
  // 		"\tlate final $2 _con;",
  // 		"",
  // 		"\t${1:$TM_FILENAME}View({Key? key, this.isForNew = false}) : super(key: key) {",
  // 		"\t\t_con = Get.put(ParmChoiceController(isForNew));",
  // 		"\t}",
  // 		"",
  // 		"\t@override",
  // 		"\tWidget build(BuildContext context) {",
  // 		"\t\treturn Container();",
  // 		"\t}",
  // 		"}",
  // 	]
  // },
  // "Get Controller": {
  // 	"prefix": [
  // 		"gcon"
  // 	],
  // 	"body": [
  // 		"import 'package:get/get.dart';",
  // 		"",
  // 		"import '../helpers/presentation_state.dart';",
  // 		"",
  // 		"class ${1}Controller extends GetxController {",
  // 		"\tfinal bool isForNew;",
  // 		"\tRx<PresentationState> state = PresentationState.loading.obs;",
  // 		"",
  // 		"\t${1}Controller(this.isForNew);",
  // 		"  @override",
  // 		"  void onInit() {",
  // 		"    // TODO: implement onInit",
  // 		"    state.value = PresentationState.loadedWithData;",
  // 		"    super.onInit();",
  // 		"  }",
  // 		"}",
  // 	]
  // },
  // "Get View With State": {
  // 	"prefix": [
  // 		"gvs"
  // 	],
  // 	"body": [
  // 		"import 'package:flutter/material.dart';",
  // 		"import 'package:get/get.dart';",
  // 		"",
  // 		"import '../elements/root_widget.dart';",
  // 		"import '../elements/error_widget.dart';",
  // 		"import '../helpers/colors_and_styles.dart';",
  // 		"import '../helpers/presentation_state.dart';",
  // 		"",
  // 		"class ${1:$TM_FILENAME_BASE}View extends StatelessWidget {",
  // 		"\tfinal bool isForNew;",
  // 		"\tlate final ${1:$TM_FILENAME_BASE}Controller _con;",
  // 		"",
  // 		"\t${1:$TM_FILENAME_BASE}View({Key? key, this.isForNew = false}) : super(key: key) {",
  // 		"\t\t_con = Get.put(${1:$TM_FILENAME_BASE}Controller(isForNew));",
  // 		"\t}",
  // 		"",
  // 		"  @override",
  // 		"  Widget build(BuildContext context) {",
  // 		"    return RootWidget(",
  // 		"      stateVar: _con.state,",
  // 		"      signOutOnError: true,",
  // 		"      child: Scaffold(",
  // 		"        appBar: AppBar(",
  // 		"          title: Text('', style: AppStyles.textStyleAppBarTitle()),",
  // 		"          centerTitle: true,",
  // 		"          // actions: [",
  // 		"          //   Obx(() => _con.state.value != PresentationState.loadedWithData",
  // 		"          //       ? Container()",
  // 		"          //       : InkWell(",
  // 		"          //           onTap: _con.doNextForNew,",
  // 		"          //           child: const SizedBox(",
  // 		"          //             width: ConstDims.appBarIconInkWellWidth,",
  // 		"          //             child: Icon(",
  // 		"          //               Icons.arrow_right_rounded,",
  // 		"          //               size: ConstDims.appBarIconSize,",
  // 		"          //             ),",
  // 		"          //           ),",
  // 		"          //         ))",
  // 		"          // ],",
  // 		"        ),",
  // 		"        body: Obx(() {",
  // 		"          switch (_con.state.value) {",
  // 		"            case PresentationState.loading:",
  // 		"              return const Center(child: CircularProgressIndicator());",
  // 		"            case PresentationState.loadingFullscreen:",
  // 		"            case PresentationState.loadedWithData:",
  // 		"              return ${1:$TM_FILENAME_BASE}ViewLoadedWidget(",
  // 		"                context: context,",
  // 		"                con: _con,",
  // 		"              );",
  // 		"            default:",
  // 		"              return const ErrorMessageWidget();",
  // 		"          }",
  // 		"        }),",
  // 		"      ),",
  // 		"    );",
  // 		"  }",
  // 		"}",
  // 		"",
  // 		"class ${1:$TM_FILENAME_BASE}ViewLoadedWidget extends StatelessWidget {",
  // 		"  final BuildContext context;",
  // 		"  final ${1:$TM_FILENAME_BASE}Controller con;",
  // 		"",
  // 		"  const ${1:$TM_FILENAME_BASE}ViewLoadedWidget({",
  // 		"    required this.context,",
  // 		"    required this.con,",
  // 		"  Key? key,",
  // 		" }) : super(key: key);",
  // 		"",
  // 		" @override",
  // 		" Widget build(BuildContext context) {",
  // 		"  return Container();",
  // 		" }",
  // 		"}",
  // 	]
  // },
  "Model": {
    "prefix": [
      "model"
    ],
    "body": [
      "import 'package:json_annotation/json_annotation.dart';",
      "import 'package:dreamic/data/helpers/model_converters.dart';",
      "",
      "part '$TM_FILENAME_BASE.g.dart';",
      "",
      "@JsonSerializable()",
      "class ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g} {",
      "  @JsonKey(includeFromJson: false, includeToJson: false)",
      "  String id;",
      "",
      "  ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}({",
      "    this.id = '',",
      "  });",
      "",
      "  factory ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}.fromJson(Map<String, dynamic> json) => _$${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}FromJson(json);",
      "  Map<String, dynamic> toJson() => _$${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}ToJson(this);",
      "}",
    ]
  },
  "Repo Int": {
    "prefix": [
      "repi"
    ],
    "body": [
      "import 'package:dartz/dartz.dart';",
      "",
      "import 'package:dreamic/data/helpers/repository_failure.dart';",
      "",
      "abstract class ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}RepoInt {",
      "Future<Either<RepositoryFailure, ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}>> get${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}ById(String id);",
      "Future<Either<RepositoryFailure, ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}>> create${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}(${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g} $1);",
      "Future<Either<RepositoryFailure, ${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}>> createOrUpdate${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}(${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g} $1);",
      "Future<Either<RepositoryFailure, Unit>> update${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g}(${TM_FILENAME_BASE/(?:^|_)(\\w)/${1:/capitalize}/g} $1);",
      "}",
    ]
  },
  "Repo Impl": {
    "prefix": [
      "repm"
    ],
    "body": [
      "import 'dart:async';",
      "import 'package:cloud_firestore/cloud_firestore.dart';",
      "import 'package:cloud_functions/cloud_functions.dart';",
      "import 'package:dartz/dartz.dart';",
      "import 'package:dreamic/data/helpers/repository_failure.dart';",
      "import 'package:dreamic/app/app_config_base.dart';",
      "import 'package:dreamic/data/repos/auth_service_int.dart';",
      "import 'package:dreamic/utils/get_it_utils.dart';",
      "import 'package:dreamic/utils/logger.dart';",
      "",
      "import '../models/$2.dart';",
      "import '$2_repo_int.dart';",
      "",
      "class ${1:$TM_FILENAME_BASE}RepoImpl implements ${1:$TM_FILENAME_BASE}RepoInt {",
      "  final FirebaseFirestore _db = FirebaseFirestore.instance;",
      "  final _fn = FirebaseFunctions.instanceFor(region: EnvironmentConfig.backendRegion);",
      "  final AuthServiceInt _authServ = Get.find();",
      "  static const String _tableName = '$2s';",
      "",
      "  @override",
      "  Future<Either<RepositoryFailure, ${1:$TM_FILENAME_BASE}>> get${1:$TM_FILENAME_BASE}ById(String id) async {",
      "    try {",
      "      var result = await _db.collection(_tableName).doc(id).get();",
      "      if (result.exists) {",
      "        return right(${1:$TM_FILENAME_BASE}.fromJson(result.data()!)..id = result.id);",
      "      } else {",
      "        return left(const RepositoryFailure.expectedRecordNotFound());",
      "      }",
      "    } catch (e) {",
      "      Logr.lt(StackTrace.current, e);",
      "      return left(const RepositoryFailure.unexpected());",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<RepositoryFailure, ${1:$TM_FILENAME_BASE}>> create${1:$TM_FILENAME_BASE}(${1:$TM_FILENAME_BASE} $2) async {",
      "    try {",
      "      var result = await _fn.httpsCallable('createOrg').call({'name': $2.name});",
      "",
      "      // var result = await _db.collection(_tableName).add(",
      "      //       org.toJson(),",
      "      // SetOptions(",
      "      //   mergeFields: ['email', 'id'],",
      "      // ),",
      "      // );",
      "      //TODO: centralized error handling",
      "      return right($2..id = result.data as String);",
      "    } catch (e) {",
      "      Logr.lt(StackTrace.current, e);",
      "      return left(const RepositoryFailure.unexpected());",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<RepositoryFailure, ${1:$TM_FILENAME_BASE}>> createOrUpdate${1:$TM_FILENAME_BASE}(${1:$TM_FILENAME_BASE} $2) async {",
      "    //TODO: these should be in these kinds of methods",
      "    // if ($2.id.isEmpty) {",
      "    //   return left(const RepositoryFailure.unexpected());",
      "    // }",
      "",
      "    try {",
      "      if ($2.id.isEmpty) {",
      "        var result = await _fn.httpsCallable('createOrg').call({'name': $2.name});",
      "        return right($2..id = result.data as String);",
      "      } else {",
      "        await _db.doc('/$_tableName/${$2.id}').update($2.toJson());",
      "        return right($2);",
      "      }",
      "    } catch (e) {",
      "      Logr.lt(StackTrace.current, e);",
      "      return left(const RepositoryFailure.unexpected());",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<RepositoryFailure, Unit>> update${1:$TM_FILENAME_BASE}(${1:$TM_FILENAME_BASE} $2) async {",
      "    try {",
      "      await _db.doc('/$_tableName/${$2.id}').update($2.toJson());",
      "      return right(unit);",
      "    } catch (e) {",
      "      Logr.lt(StackTrace.current, e);",
      "      return left(const RepositoryFailure.unexpected());",
      "    }",
      "  }",
      "}"
    ]
  }
}